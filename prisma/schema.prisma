datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id                   Int                  @id @default(autoincrement())
  pubkey               String               @unique
  username             String?              @unique
  nostrPubkey          String?
  lud16                String?
  contacts             Contact[]            @relation("UserContacts")
  contactOf            Contact[]            @relation("ContactUser")
  proofs               Proof[]
  mintQuotes           MintQuote[]
  defaultMint          Mint                 @relation(fields: [defaultMintUrl], references: [url])
  defaultMintUrl       String
  defaultUnit          String               @default("usd")
  allowedUnits         String[]
  receiving            Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  hideFromLeaderboard  Boolean              @default(false)
  // whether or not this user is in mintless mode to receive
  mintlessReceive      Boolean              @default(false)
  Notification         Notification[]
  // custom gifts created by this user
  customGifts          Gift[]               @relation("CustomGifts")
  // UserCustomGift UserConditionalGift[]
  createdTokens        Token[]              @relation("TokenCreatedBy")
  receivedTokens       Token[]              @relation("TokenRecipient")
  claimedCampaingGifts SingleGiftCampaign[]
}

model Contact {
  id           Int      @id @default(autoincrement())
  nickname     String?
  phoneNumber  String?
  email        String?
  xHandle      String?
  user         User     @relation("UserContacts", fields: [userId], references: [pubkey])
  userId       String
  linkedUser   User?    @relation("ContactUser", fields: [linkedUserId], references: [pubkey])
  linkedUserId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, linkedUserId]) // can only have one contact per user
}

model Proof {
  id           Int        @id @default(autoincrement())
  proofId      String
  amount       Int
  secret       String
  C            String
  unit         String     @default("usd")
  userId       Int // Foreign key to associate proof with a user
  user         User       @relation(fields: [userId], references: [id]) // Links back to the User model
  mintKeysetId String
  MintKeyset   MintKeyset @relation(fields: [mintKeysetId], references: [id])

  @@index([userId], name: "idx_user_id") // index to improve query performance on the userId field
}

model MintQuote {
  id      String  @id
  amount  Int
  request String
  paid    Boolean

  expiryUnix   Int
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [pubkey], references: [pubkey])
  pubkey       String
  mintKeyset   MintKeyset @relation(fields: [mintKeysetId], references: [id])
  mintKeysetId String
  token        String? // encoded token so that frontend can display it
}

model Mint {
  url     String       @id
  keysets MintKeyset[]
  user    User[]
}

model MintKeyset {
  id        String      @id
  keys      String[]
  unit      String
  proof     Proof[]
  mintQuote MintQuote[]
  mint      Mint        @relation(fields: [mintUrl], references: [url])
  mintUrl   String
}

model Notification {
  id                    Int                  @id @default(autoincrement())
  userPubkey            String
  // made type and data with the plan to deprecate, only deprecated for mintless transactions
  type                  String // "token" | "new-contact"
  data                  String?
  tokenId               String?
  mintlessTransactionId String?
  token                 Token?               @relation(fields: [tokenId], references: [id])
  isRead                Boolean              @default(false)
  user                  User                 @relation(fields: [userPubkey], references: [pubkey])
  mintlessTransaction   MintlessTransaction? @relation(fields: [mintlessTransactionId], references: [id])
  createdAt             DateTime             @default(now())
}

model Token {
  id              String         @id
  token           String
  createdAt       DateTime       @default(now())
  redeemedAt      DateTime?
  gift            String?
  Notification    Notification[]
  createdByPubkey String?
  recipientPubkey String?
  // whether or not this token is a fee
  isFee           Boolean        @default(false)
  recipient       User?          @relation(fields: [recipientPubkey], references: [pubkey], name: "TokenRecipient")
  createdBy       User?          @relation(fields: [createdByPubkey], references: [pubkey], name: "TokenCreatedBy")
}

model MintlessTransaction {
  id              String         @id @default(uuid())
  gift            String?
  notificationId  String
  amount          Int
  recipientPubkey String
  createdByPubkey String
  createdAt       DateTime       @default(now())
  isFee           Boolean        @default(false)
  Notification    Notification[]
}

model Gift {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  amount             Int
  unit               String              @default("usd")
  description        String?
  // path to image (relative path or full url)
  imageUrlSelected   String
  imageUrlUnselected String
  // null -> anyone can send/receive;
  creatorPubkey      String?
  // the creator of the gift
  creator            User?               @relation("CustomGifts", fields: [creatorPubkey], references: [pubkey])
  // fee in cents user has to pay to send
  fee                Int?
  // don't show if inactive
  active             Boolean             @default(true)
  // // true -> anyone can send/receive; false -> only the creator can send/receive
  // isGlobal    Boolean @default(true)
  // // whether or not there are `conditions`
  // isConditional     Boolean               @default(false)
  // // set of condiditions that must be met to send the gift
  // sendConditions    GiftCondition[]       @relation("SendConditions")
  // // receive conditions -> user cannot receive the gift unless they meet these conditions
  // receiveConditions GiftCondition[]       @relation("ReceiveConditions")
  // // the users that can send the gift
  // userGifts         UserConditionalGift[]
  SingleGiftCampaign SingleGiftCampaign?

  @@index([creatorPubkey])
  @@index([name])
}

model PendingOtp {
  id          Int      @id @default(autoincrement())
  userPubkey  String // user trying to login
  nostrPubkey String // nostr pubkey to authenticate
  otpCode     String   @unique
  createdAt   DateTime @default(now())

  @@index([otpCode])
}

model SingleGiftCampaign {
  id          Int       @id @default(autoincrement())
  // set to false when expired or max gifts have been claimed
  active      Boolean   @default(true)
  name        String
  description String?
  // funding source for this campaign
  nwcUri      String
  // which gift is given out
  giftId      Int       @unique
  // max gifts that can be claimed
  totalGifts  Int
  // all users that have claimed this campaign
  claimedBy   User[]
  // optionally expires and becomes inactive
  expiresAt   DateTime?
  gift        Gift      @relation(fields: [giftId], references: [id])
  createdAt   DateTime  @default(now())
}

// model GiftCondition {
//   id                      Int    @id @default(autoincrement())
//   giftId                  Int
//   // one time use, limited supply, expiry, unlimited supply
//   conditionType           String
//   // number of gifts, expiry date, etc
//   conditionValue          Json
//   // array of gifts that are conditionally sendable
//   conditionalSendGifts    Gift[] @relation("SendConditions")
//   // array of gifts that are conditionally receivable
//   conditionalReceiveGifts Gift[] @relation("ReceiveConditions")

//   @@index([giftId])
// }

// model UserConditionalGift {
//   id               Int  @id @default(autoincrement())
//   userId           Int
//   giftId           Int
//   conditionsStatus Json
//   user             User @relation(fields: [userId], references: [id])
//   gift             Gift @relation(fields: [giftId], references: [id])

//   @@index([userId])
//   @@index([giftId])
// }
