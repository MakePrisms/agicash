datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id             Int            @id @default(autoincrement())
  pubkey         String         @unique
  username       String?        @unique
  contacts       Contact[]      @relation("UserContacts")
  contactOf      Contact[]      @relation("ContactUser")
  proofs         Proof[]
  mintQuotes     MintQuote[]
  defaultMint    Mint           @relation(fields: [defaultMintUrl], references: [url])
  defaultMintUrl String
  allowedUnits   String[]
  receiving      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Notification   Notification[]
}

model Contact {
  id           Int      @id @default(autoincrement())
  nickname     String?
  phoneNumber  String?
  email        String?
  xHandle      String?
  user         User     @relation("UserContacts", fields: [userId], references: [pubkey])
  userId       String
  linkedUser   User?    @relation("ContactUser", fields: [linkedUserId], references: [pubkey])
  linkedUserId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, linkedUserId]) // can only have one contact per user
}

model Proof {
  id           Int        @id @default(autoincrement())
  proofId      String
  amount       Int
  secret       String
  C            String
  userId       Int // Foreign key to associate proof with a user
  user         User       @relation(fields: [userId], references: [id]) // Links back to the User model
  mintKeysetId String
  MintKeyset   MintKeyset @relation(fields: [mintKeysetId], references: [id])

  @@index([userId], name: "idx_user_id") // index to improve query performance on the userId field
}

model MintQuote {
  id      String  @id
  amount  Int
  request String
  paid    Boolean

  expiryUnix   Int
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [pubkey], references: [pubkey])
  pubkey       String
  mintKeyset   MintKeyset @relation(fields: [mintKeysetId], references: [id])
  mintKeysetId String
  token        String? // encoded token so that frontend can display it
}

model Mint {
  url     String       @id
  keysets MintKeyset[]
  user    User[]
}

model MintKeyset {
  id        String      @id
  keys      String[]
  unit      String
  proof     Proof[]
  mintQuote MintQuote[]
  mint      Mint        @relation(fields: [mintUrl], references: [url])
  mintUrl   String
}

model Notification {
  id         Int      @id @default(autoincrement())
  userPubkey String
  type       String // "token" | "new-contact"
  data       String
  isRead     Boolean  @default(false)
  user       User     @relation(fields: [userPubkey], references: [pubkey])
  createdAt  DateTime @default(now())
}

model Token {
  id         String    @id
  token      String
  createdAt  DateTime  @default(now())
  redeemedAt DateTime?
}
