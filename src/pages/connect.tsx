import React, { useCallback, useEffect } from 'react';
import Disclaimer from '@/components/Disclaimer';
import { useAppDispatch } from '@/redux/store';
import { initializeUser } from '@/redux/slices/UserSlice';
import { Spinner } from 'flowbite-react';
import { nip04 } from 'nostr-tools';
import { assembleLightningAddress } from '@/utils/lud16';
import { NWAEventContent } from '@/types';
import { useRouter } from 'next/router';
import { NostrEvent } from '@nostr-dev-kit/ndk';
import { useNDK } from '@/hooks/nostr/useNDK';
import { addNwcConnection } from '@/redux/slices/NwcSlice';
import { NWCMethods } from '@/hooks/nostr/useNwc';

export default function Home() {
   const router = useRouter();
   const { query } = router;

   const { publishNostrEvent } = useNDK();

   const dispatch = useAppDispatch();

   // implements nip67 https://github.com/benthecarman/nips/blob/nostr-wallet-connect-connect/67.md
   const handleNwa = useCallback(async () => {
      await dispatch(initializeUser());

      let params = new URL(document.location.href).searchParams;

      let nwa = params.get('nwa');
      if (nwa) {
         // Decode the nwa parameter
         let decodedNwa = decodeURIComponent(nwa);

         // remove the prefix nostr+walletauth://
         decodedNwa = decodedNwa.replace('nostr+walletauth://', '');

         // Extract the appPublicKey from the decoded NWA string
         const [appPublicKey, queryParams] = decodedNwa.split('?');

         // Parse the query parameters
         let queryParamsObj = new URLSearchParams(queryParams);

         // Extract each value
         const appRelay = queryParamsObj.get('relay'); // relay to communicate with the app
         const secret = queryParamsObj.get('secret'); // secret generated by app
         const requiredCommands = queryParamsObj.get('required_commands') || '';
         const budget = queryParamsObj.get('budget');
         const identity = queryParamsObj.get('identity');

         if (!appRelay) {
            console.log('No relay found');
            return;
         }

         if (!secret) {
            throw new Error('No secret found');
         }

         const pubkey = window.localStorage.getItem('pubkey');
         const privkey = window.localStorage.getItem('privkey');

         if (!pubkey || !privkey) {
            throw new Error('No pubkey or privkey found in localStorage');
         }

         const content: NWAEventContent = {
            secret: secret,
            commands: [...requiredCommands.split(',')],
            relay: appRelay,
            lud16: `${assembleLightningAddress(pubkey, window.location.host)}`,
         };

         const encryptedContent = await nip04.encrypt(
            privkey,
            appPublicKey,
            JSON.stringify(content),
         );

         let eventTemplate: NostrEvent = {
            kind: 33194,
            created_at: Math.floor(Date.now() / 1000),
            tags: [['d', appPublicKey]],
            content: encryptedContent,
            pubkey,
         };

         await publishNostrEvent(eventTemplate, [appRelay]);

         const connection = {
            pubkey: appPublicKey,
            appName: 'Zap Bot',
            budget: undefined,
            expiry: undefined,
            // expiry: Math.floor(new Date(expiry).getTime() / 1000),
            spent: 0,
            permissions: [NWCMethods.getInfo, NWCMethods.payInvoice, NWCMethods.getBalance],
            // mintUrl,
            createdAt: Math.floor(Date.now() / 1000),
         };

         console.log('## CREATING CONNECTION: ', connection);

         dispatch(
            addNwcConnection({
               connection,
               pubkey: appPublicKey,
            }),
         );

         // redirect to home page
         router.push('/wallet?just_connected=true');
      }
   }, [dispatch, publishNostrEvent, router]);

   useEffect(() => {
      const keysets = window.localStorage.getItem('keysets');

      if (keysets) {
         handleNwa().catch(e => console.error(e));
         return;
      }

      const params = new URL(document.location.href).searchParams;

      if (Object.keys(query).length === 0) {
         console.log('No query params found');
         return;
      }

      const nwa = params.get('nwa');

      if (!nwa) {
         throw new Error('No NWA parameter found');
      }

      router.push({
         pathname: '/setup',
         query,
      });
   }, [handleNwa, query, router]);

   return (
      <main className='flex flex-col items-center justify-center mx-auto min-h-screen'>
         <div className='py-8 w-full'>
            <div className='flex flex-col justify-center align-middle items-center mx-auto'>
               <Spinner size='xl' className='mb-4' />
               <h2>Connecting you to the Zap Bot...</h2>
            </div>
         </div>
         <footer className='fixed inset-x-0 bottom-0 text-center p-4 shadow-md flex  flex-col items-center justify-center'>
            <Disclaimer />
         </footer>
      </main>
   );
}
